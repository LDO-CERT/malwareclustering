# cython: profile=True
import numpy as np
import re
cimport numpy as np
cimport cython
from cython.parallel import prange

bc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz@}]^+-*/?,._'

cdef int[:] _n_vector_ranks_only  = np.arange(1023, -1, -1, dtype=np.int32)
_bin2base64 = {"{:06b}".format(i): base64char for i, base64char in enumerate(bc)}
_base642bin = {v: k for k, v in _bin2base64.items()}

cdef int[:] _n_apply_weights(int[:] vector):
    return np.multiply(vector, _n_vector_ranks_only)

@cython.boundscheck(False)
@cython.wraparound(False)
cdef double ruzicka_nc(int[:] x, int[:] y):
    cdef int[:] vector_a, vector_b
    vector_a = _n_apply_weights(x)
    vector_b = _n_apply_weights(y)
    cdef double maxPQ = np.sum(np.maximum(vector_a, vector_b))
    return np.sum(np.minimum(vector_a, vector_b))/maxPQ

def _decompress_get(data):
    for match in re.finditer(r"(?P<char>.)((?P<count>\d+))?", data):
        if not match.group("count"): 
            yield match.group("char")
        else: 
            yield match.group("char") * int(match.group("count"))


cdef int[:]  n_decompress(compressed_vector):
#    cdef char* decompressed_b64, vectorized
    decompressed_b64 = "".join(_decompress_get(compressed_vector))
    vectorized = "".join(_base642bin[c] for c in decompressed_b64)[:-2]
    cdef int[:] as_binary = np.fromiter(vectorized, np.int32)
    return as_binary

cdef double cy_test(x, y):
    cdef int[:] ix, iy, vector_a, vector_b 
    if len(x) != 1024:
        ix = n_decompress(x)
    vector_a = _n_apply_weights(ix)
    if len(y) != 1024:
        iy = n_decompress(y)
    vector_b = _n_apply_weights(iy)
    cdef double maxPQ = np.sum(np.maximum(vector_a, vector_b))
    return np.sum(np.minimum(vector_a, vector_b))/maxPQ


cdef ruzicka(int *a, int *b, int sa):
    cdef int i, max_ab = 0, min_ab = 0
    for i in range(sa):
        if a[i] > b[i]:
            max_ab += a[i]
            min_ab += b[i]
        else:
            max_ab += b[i]
            min_ab += a[i]
    return min_ab * 1.0 / max_ab * 1.0

cdef float ruzicka2(int[:] a, int[:] b, int sa):
    cdef int i, maxab = 0, minab = 0
    cdef int[::1] max_ab = np.zeros((sa,), dtype=np.int32)
    cdef int[::1] min_ab = np.zeros((sa,), dtype=np.int32)
    with nogil, cython.boundscheck(False), cython.wraparound(False):
        for i in prange(sa, schedule='static', num_threads=31):
            if a[i] > b[i]:
                max_ab[i] = a[i]
                min_ab[i] = b[i]
            else:
                max_ab[i] = b[i]
                min_ab[i] = a[i]
    for i in range(sa):
        maxab += max_ab[i]
        minab += min_ab[i]
    return minab * 1.0 / maxab * 1.0

def trial(a, b):
    return ruzicka( <int *>(np.PyArray_DATA(a.astype(np.int32))), <int *>(np.PyArray_DATA(b.astype(np.int32))), len(a))

def retrial(a, b):
    return ruzicka2( a.astype(np.int32), b.astype(np.int32), len(a))

def reretrial(a, b):
    return ruzicka_nc(a.astype(np.int32), b.astype(np.int32))

def rereretrial(a, b):
    return cy_test(a, b)