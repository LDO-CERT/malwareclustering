/*cppimport
<%
cfg['compiler_args'] = ['-fopenmp']
cfg['linker_args'] = ['-lgomp', '-fopenmp']
setup_pybind11(cfg)
%>
*/
#include <cmath>
#include <omp.h>
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

namespace py = pybind11;

double ruzicka(const py::array_t<int, py::array::c_style>& a, const py::array_t<int, py::array::c_style>& b) {
    int shape = a.shape(0);
    const int *ptr_a = (const int *) a.data();
    const int *ptr_b = (const int *) b.data();

    py::gil_scoped_release release;

    int max_ab = 0;
    int min_ab = 0;

    #pragma omp parallel for reduction(+:max_ab) reduction(+:min_ab)
    for (int i = 0; i < shape; i++) {
        if (ptr_a[i] > ptr_b[i]){
            max_ab += ptr_a[i];
            min_ab += ptr_b[i];
        }else{
            max_ab += ptr_b[i];
            min_ab += ptr_a[i];
        }
    }
    return (double)min_ab / (double)max_ab;
}

PYBIND11_MODULE(wrap7, m) {
    m.doc() = "auto-compiled c++ extension";
    m.def("ruzicka", &ruzicka);
}
