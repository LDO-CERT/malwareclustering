/*
<%
cfg['compiler_args'] = ['-std=c++11', '-fopenmp']
cfg['linker_args'] = ['-lgomp', '-fopenmp']
setup_pybind11(cfg)
%>
*/
#include <cmath>
#include <omp.h>
#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

namespace py = pybind11;

float ruzicka(py::array_t<int> a, py::array_t<int> b) {
    py::gil_scoped_acquire acquire;

    auto info_a = a.request();
    auto info_b = b.request();
    int *ptr_a = (int *)info_a.ptr;
    int *ptr_b = (int *)info_b.ptr;
    int max_ab = 0;
    int min_ab = 0;
    #pragma omp parallel 
    {
        #pragma omp for reduction(+:max_ab) reduction(+:min_ab)
        for (int i = 0; i < info_a.shape[0]; i++) {
            if (ptr_a[i] > ptr_b[i]){
                max_ab += ptr_a[i];
                min_ab += ptr_b[i];
            }else{
                max_ab += ptr_b[i];
                min_ab += ptr_a[i];
            }
        }
    }
    return (float)min_ab / (float)max_ab;
}

PYBIND11_MODULE(wrap7, m) {
    m.doc() = "auto-compiled c++ extension";
    m.def("ruzicka", [](py::array_t<int> a, py::array_t<int> b) {
        py::gil_scoped_release release;
        return ruzicka(a, b);
    });
}
